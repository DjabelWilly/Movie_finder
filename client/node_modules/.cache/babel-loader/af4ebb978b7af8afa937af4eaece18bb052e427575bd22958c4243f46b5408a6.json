{"ast":null,"code":"var _jsxFileName = \"D:\\\\04 - React\\\\Movie_finder\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport MovieCard from \"./components/MovieCard\";\nimport SearchIcon from \"./search.svg\";\nimport \"./App.css\";\nimport API_URL from \"./config/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [selectedMovieId, setSelectedMovieId] = useState(null); // Gère l'affichage d'un seul film\n\n  const getMovies = async title => {\n    try {\n      const response = await fetch(`${API_URL}/movies?title=${title}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || response.statusText);\n      }\n      const data = await response.json();\n      setMovies(data.Search || []);\n      setMessage(data.Search && data.Search.length > 0 ? \"\" : \"Désolé, nous n'avons rien trouvé avec ce nom.\");\n    } catch (error) {\n      console.error(\"Une erreur est survenue:\", error);\n      setMessage(\"Une erreur est survenue. Veuillez réessayer plus tard.\");\n    }\n  };\n  const handleTerm = e => {\n    const searchTerm = e.target.value;\n    const validateSearchTerm = searchTerm => {\n      const regex = /^[a-zA-Z0-9\\s-_]*$/i;\n\n      // Si le terme de recherche contient des caractères spéciaux\n      if (!regex.test(searchTerm)) {\n        setMessage(`Les caractères spéciaux ne sont pas autorisés.`);\n        return false;\n      }\n      // Si le terme de recherche est vide\n      else if (searchTerm.trim() === \"\") {\n        setMessage(\"Veuillez entrer un nom de film ou une série.\");\n        return false;\n      }\n      // Sinon, on reset le message\n      else {\n        setMessage(\"\");\n        return true;\n      }\n    };\n    validateSearchTerm(searchTerm);\n    console.log(validateSearchTerm(searchTerm));\n\n    // Si le terme de recherche passe la validation, alors on met à jour le state\n    validateSearchTerm(searchTerm) && setSearchTerm(searchTerm);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movie Finder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: searchTerm,\n        onChange: handleTerm,\n        placeholder: \"Entrez un nom de film ou une s\\xE9rie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: SearchIcon,\n        alt: \"search\",\n        onClick: () => {\n          if (searchTerm.trim() === \"\") {\n            // Si le terme de recherche est vide empêche la recherche\n            setMessage(\"Veuillez entrer un nom de film ou une série.\");\n            return;\n          }\n          getMovies(searchTerm);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }, this), selectedMovieId ? /*#__PURE__*/_jsxDEV(MovieCard, {\n      movie: movies.find(m => m.imdbID === selectedMovieId),\n      selectedMovieId: selectedMovieId,\n      setSelectedMovieId: setSelectedMovieId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // Sinon, afficher la liste des films recherchés par le titre\n    _jsxDEV(\"div\", {\n      className: \"container\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: movie,\n        selectedMovieId: selectedMovieId,\n        setSelectedMovieId: setSelectedMovieId\n      }, movie.imdbID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"ls68cwocweFysYs6uQn+P0suozg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MovieCard","SearchIcon","API_URL","jsxDEV","_jsxDEV","App","_s","searchTerm","setSearchTerm","movies","setMovies","message","setMessage","selectedMovieId","setSelectedMovieId","getMovies","title","response","fetch","ok","errorData","json","Error","statusText","data","Search","length","error","console","handleTerm","e","target","value","validateSearchTerm","regex","test","trim","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","src","alt","onClick","movie","find","m","imdbID","map","_c","$RefreshReg$"],"sources":["D:/04 - React/Movie_finder/client/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport MovieCard from \"./components/MovieCard\";\r\nimport SearchIcon from \"./search.svg\";\r\nimport \"./App.css\";\r\nimport API_URL from \"./config/constants\";\r\n\r\nconst App = () => {\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [movies, setMovies] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [selectedMovieId, setSelectedMovieId] = useState(null); // Gère l'affichage d'un seul film\r\n\r\n\r\n    const getMovies = async (title) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/movies?title=${title}`);\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || response.statusText);\r\n            }\r\n            const data = await response.json();\r\n            setMovies(data.Search || []);\r\n            setMessage(data.Search && data.Search.length > 0 ? \"\" : \"Désolé, nous n'avons rien trouvé avec ce nom.\");\r\n        } catch (error) {\r\n            console.error(\"Une erreur est survenue:\", error);\r\n            setMessage(\"Une erreur est survenue. Veuillez réessayer plus tard.\");\r\n        }\r\n    };\r\n\r\n    const handleTerm = (e) => {\r\n        const searchTerm = e.target.value;\r\n\r\n        const validateSearchTerm = (searchTerm) => {\r\n\r\n            const regex = /^[a-zA-Z0-9\\s-_]*$/i;\r\n\r\n            // Si le terme de recherche contient des caractères spéciaux\r\n            if (!regex.test(searchTerm)) {\r\n                setMessage(`Les caractères spéciaux ne sont pas autorisés.`);\r\n                return false;\r\n            }\r\n            // Si le terme de recherche est vide\r\n            else if (searchTerm.trim() === \"\") {\r\n                setMessage(\"Veuillez entrer un nom de film ou une série.\");\r\n                return false;\r\n            }\r\n            // Sinon, on reset le message\r\n            else {\r\n                setMessage(\"\");\r\n                return true;\r\n            }\r\n\r\n        }\r\n\r\n        validateSearchTerm(searchTerm);\r\n        console.log(validateSearchTerm(searchTerm));\r\n\r\n\r\n        // Si le terme de recherche passe la validation, alors on met à jour le state\r\n        validateSearchTerm(searchTerm) && setSearchTerm(searchTerm);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <h1>Movie Finder</h1>\r\n\r\n            <div className=\"search\">\r\n                <input\r\n                    value={searchTerm}\r\n                    onChange={handleTerm}\r\n                    placeholder=\"Entrez un nom de film ou une série\"\r\n                />\r\n                <img\r\n                    src={SearchIcon}\r\n                    alt=\"search\"\r\n                    onClick={() => {\r\n                        if (searchTerm.trim() === \"\") { // Si le terme de recherche est vide empêche la recherche\r\n                            setMessage(\"Veuillez entrer un nom de film ou une série.\");\r\n                            return;\r\n                        }\r\n                        getMovies(searchTerm);\r\n                    }}\r\n                />\r\n\r\n            </div>\r\n            {message && <p className=\"message\">{message}</p>}\r\n\r\n            {/* Si un film est sélectionné, afficher uniquement ce film */}\r\n            {selectedMovieId ? (\r\n                <MovieCard\r\n                    movie={movies.find((m) => m.imdbID === selectedMovieId)}\r\n                    selectedMovieId={selectedMovieId}\r\n                    setSelectedMovieId={setSelectedMovieId}\r\n                />\r\n            ) : (\r\n                // Sinon, afficher la liste des films recherchés par le titre\r\n                <div className=\"container\">\r\n                    {movies.map((movie) => (\r\n                        <MovieCard\r\n                            key={movie.imdbID}\r\n                            movie={movie}\r\n                            selectedMovieId={selectedMovieId}\r\n                            setSelectedMovieId={setSelectedMovieId}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}